{"version":3,"sources":["Componenets/ContactList/ContactListStyled.jsx","Componenets/ContactList/ContactListItem/ContactListItemStyled.jsx","Componenets/ContactList/ContactListItem/ContactListItem.jsx","redux/actions.js","Componenets/ContactList/ContactList.jsx","Componenets/Filter/FilterStyled.jsx","Componenets/Filter/FIlter.jsx","Componenets/Form/FormStyled.jsx","Componenets/Form/Form.jsx","Componenets/Section/SectionStyled.jsx","Componenets/Section/Section.jsx","style/GlobalStyle.jsx","App.js","redux/reducerContacts.js","redux/reducerFilter.js","redux/store.js","index.js"],"names":["ContactWrapper","styled","ul","ContactItem","li","ContactListItem","id","name","number","onDeleteContact","className","onClick","addContact","createAction","payload","uuidv4","deleteContact","changeFilter","connect","state","contacts","filter","item","normalizedFilter","toLowerCase","visibleContacts","contact","includes","dispatch","map","FilterWrapper","label","onChange","event","target","value","type","FormWrapper","form","onSubmit","useState","setName","setNumber","handleChangeInput","currentTarget","alert","preventDefault","pattern","title","required","SectionContainer","section","Section","children","createGlobalStyle","App","GlobalStyle","createReducer","initState","contactsBase","isContact","some","findName","_","contactsConfig","key","storage","blacklist","combineReducers","store","configureStore","reducer","persistReducer","middleware","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.78f1d31e.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n\r\nexport const ContactWrapper = styled.ul`\r\n    \r\n    padding: 15px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 4;\r\n     \r\n`;","import styled from \"styled-components\";\r\n\r\n\r\nexport const ContactItem = styled.li`\r\n    padding: 15px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    font-size: 24px;\r\n\r\n    .buttonDelete{\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        width: 100px;\r\n        height: 20px;\r\n        line-height: 16px;\r\n        border-radius: 45px;\r\n        margin: 10px 20px;\r\n        font-size: 10px;\r\n        text-transform: uppercase;\r\n        text-align: center;\r\n        letter-spacing: 3px;\r\n        font-weight: 600;\r\n        color: #524f4e;\r\n        background: white;\r\n        box-shadow: 0 8px 15px rgba(0, 0, 0, .1);\r\n        transition: .3s;\r\n    }\r\n    .buttonDelete:hover {\r\n        background: #e53a2e;\r\n        box-shadow: 0 15px 20px rgba(46, 229, 157, .4);\r\n        color: white;\r\n        transform: translateY(-7px);\r\n    }\r\n        \r\n`;","import { ContactItem } from \"./ContactListItemStyled\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => {\r\n    return (\r\n        <ContactItem>\r\n            <p>{name}: {number}</p>\r\n            <button className=\"buttonDelete\" onClick={() => onDeleteContact(id)}>Delete</button>\r\n        </ContactItem>\r\n    );\r\n}\r\n\r\nexport default ContactListItem;\r\n\r\nContactListItem.propTypes = {\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n    onDeleteContact: PropTypes.func,\r\n}","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const addContact = createAction('contacts/add', (name, number) => ({\r\n    payload: {\r\n        id: uuidv4(),\r\n        name,\r\n        number\r\n    }\r\n\r\n}))\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { ContactWrapper } from \"./ContactListStyled\";\r\nimport ContactListItem from \"./ContactListItem/ContactListItem\";\r\nimport { deleteContact } from '../../redux/actions';\r\n\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n    return (\r\n        <ContactWrapper>\r\n            {contacts?.map(({ id, name, number }) => <ContactListItem key={id} name={name} number={number} id={id} onDeleteContact={onDeleteContact} />)}\r\n        </ContactWrapper>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { filter, item } = state.contacts;\r\n    const normalizedFilter = filter.toLowerCase();\r\n    const visibleContacts = item?.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n\r\n    if (normalizedFilter) {\r\n        return {\r\n            contacts: visibleContacts\r\n        }\r\n    } else {\r\n        return {\r\n            contacts: state.contacts.item\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteContact: id => dispatch(deleteContact(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array,\r\n    onDeleteContact: PropTypes.func,\r\n}","import styled from \"styled-components\";\r\n\r\n\r\nexport const FilterWrapper = styled.label`\r\n\r\n    padding: 15px;\r\n    display: flex;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    flex-grow: 1;\r\n    \r\n\r\n    .input {\r\n        display:block;\r\n        font-size: 20px;\r\n        width: 200px;\r\n        width:450;\r\n        margin:10px 0;\r\n        background-color: #fafafa;\r\n        border:0;\r\n        border-radius: 5px;\r\n        box-shadow:0 0 4px rgba(0,0,0,0.3);\r\n        transition: .3s box-shadow;\r\n    }\r\n\r\n    .input:hover {\r\n        box-shadow:0 0 4px rgba(0,0,0,0.5);\r\n    }\r\n`;","import { FilterWrapper } from \"./FilterStyled\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport { changeFilter } from '../../redux/actions';\r\n\r\nconst FIlter = ({ filter, onChange }) => {\r\n    return (\r\n        <FilterWrapper>\r\n            Find contact by name\r\n            <input className=\"input\" type=\"text\" value={filter} onChange={onChange} />\r\n        </FilterWrapper>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    filter: state.contacts.filter\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (event) => dispatch(changeFilter(event.target.value))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FIlter);\r\n\r\nFIlter.propTypes = {\r\n    filter: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n}","import styled from \"styled-components\";\r\n\r\n\r\nexport const FormWrapper = styled.form`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n\r\n    label {\r\n        padding: 15px;\r\n        display: flex;\r\n        font-size: 20px;\r\n        font-weight: 600;\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n    }\r\n\r\n\r\n    .input {\r\n        display:block;\r\n        font-size: 20px;\r\n        width: 200px;\r\n        width:450;\r\n        margin:10px 0;\r\n        background-color: #fafafa;\r\n        border:0;\r\n        border-radius: 5px;\r\n        box-shadow:0 0 4px rgba(0,0,0,0.3);\r\n        transition: .3s box-shadow;\r\n    }\r\n\r\n    .input:hover {\r\n        box-shadow:0 0 4px rgba(0,0,0,0.5);\r\n    }\r\n\r\n    .buttonSubmit {\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        width: 175px;\r\n        height: 45px;\r\n        line-height: 45px;\r\n        border-radius: 45px;\r\n        margin: 10px 20px;\r\n        font-family: 'Montserrat', sans-serif;\r\n        font-size: 11px;\r\n        text-transform: uppercase;\r\n        text-align: center;\r\n        letter-spacing: 3px;\r\n        font-weight: 600;\r\n        color: #524f4e;\r\n        background: white;\r\n        box-shadow: 0 8px 15px rgba(0, 0, 0, .1);\r\n        transition: .3s;\r\n    }\r\n    .buttonSubmit:hover {\r\n        background: #2EE59D;\r\n        box-shadow: 0 15px 20px rgba(46, 229, 157, .4);\r\n        color: white;\r\n        transform: translateY(-7px);\r\n    }\r\n`;","import { FormWrapper } from \"./FormStyled\";\r\nimport { connect } from \"react-redux\";\r\nimport { addContact } from '../../redux/actions';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst Form = function ({ onSubmit }) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const handleChangeInput = event => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n\r\n            default:\r\n                alert(\"нет такой кнопки\");\r\n        }\r\n    }\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        onSubmit(name, number);\r\n        setName('');\r\n        setNumber('')\r\n    }\r\n\r\n\r\n    return (\r\n        <FormWrapper onSubmit={handleSubmit}>\r\n            <label>\r\n                Name\r\n                <input\r\n                    className=\"input\"\r\n                    onChange={handleChangeInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    value={name}\r\n                    required\r\n                />\r\n            </label>\r\n            <label>\r\n                Number\r\n                <input\r\n                    className=\"input\"\r\n                    onChange={handleChangeInput}\r\n                    value={number}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                />\r\n            </label>\r\n            <button type=\"submit\" className=\"buttonSubmit\">Add contact</button>\r\n        </FormWrapper>\r\n    );\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(addContact(name, number))\r\n});\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);","import styled from \"styled-components\";\r\n\r\n\r\nexport const SectionContainer = styled.section`\r\n    padding: 20px;\r\n    background-color: #23e5ecf0;\r\n    width: 800px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    text-align: center;\r\n\r\n    .contactsWrapper {\r\n        display:flex;\r\n        align-content: stretch\r\n    }\r\n\r\n    .title {\r\n        text-align: center;\r\n        align-items: flex-start;\r\n    }\r\n`;","import { SectionContainer } from \"./SectionStyled\";\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <SectionContainer>\r\n            <h1 className=\"title\">{title}</h1>\r\n            {children}\r\n        </SectionContainer>\r\n    );\r\n}\r\n\r\nexport default Section;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport default createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*,\r\n*::after,\r\n*::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\np {\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n}\r\n\r\nul,\r\nol {\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n  padding-left: 0;\r\n  list-style: none;\r\n}\r\n\r\nimg {\r\n  display: block;\r\n  max-width: 100%;\r\n  height: auto;\r\n}\r\n\r\n.list {\r\n  list-style: none;\r\n}\r\n\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n`;\r\n","\nimport ContactList from './Componenets/ContactList/ContactList';\nimport FIlter from './Componenets/Filter/FIlter';\nimport Form from './Componenets/Form/Form';\nimport Section from './Componenets/Section/Section';\n\nimport GlobalStyles from \"../src/style/GlobalStyle\";\n\nexport default function App() {\n\n  return (\n    <>\n      <GlobalStyles />\n      <Section title={'Phonebook'}>\n        <Form />\n      </Section>\n      <Section title={'Contacts'}>\n        <div className=\"contactsWrapper\">\n          <FIlter />\n          <ContactList />\n        </div>\n      </Section>\n    </>\n  );\n}\n\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport initState from '../contacts.json';\r\nimport { addContact, deleteContact } from \"./actions\";\r\n\r\n\r\n\r\nconst findName = function (contacts, payload) {\r\n    const isContact = contacts.some(item => item.name === payload.name);\r\n    isContact && alert(`${payload.name} is already in contacts`);\r\n    return !isContact ? [...contacts, payload] : contacts;\r\n}\r\n\r\nconst item = createReducer(initState.contactsBase, {\r\n    [addContact]: ((state, { payload }) => findName(state, payload)),\r\n    [deleteContact]: ((state, { payload }) => state.filter(({ id }) => id !== payload)),\r\n\r\n})\r\n\r\nexport default item;","\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { changeFilter } from \"./actions\";\r\n\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: ((_, { payload }) => payload),\r\n})\r\n\r\nexport default filter;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport logger from 'redux-logger';\r\nimport item from \"./reducerContacts\";\r\nimport filter from \"./reducerFilter\";\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst contactsConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter']\r\n}\r\n\r\n\r\nconst contacts = combineReducers({\r\n    item,\r\n    filter\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: { contacts: persistReducer(contactsConfig, contacts) },\r\n    middleware: [logger],\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store)\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store } from './redux/store';\nimport { persistor } from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}